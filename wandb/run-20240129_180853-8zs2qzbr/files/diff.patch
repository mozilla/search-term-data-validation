diff --git a/jobs/search-term-data-validation-v2/requirements.txt b/jobs/search-term-data-validation-v2/requirements.txt
index 4a80e19..e0c7dee 100644
--- a/jobs/search-term-data-validation-v2/requirements.txt
+++ b/jobs/search-term-data-validation-v2/requirements.txt
@@ -4,6 +4,8 @@ google-cloud-bigquery==3.0.1
 spacy>=3.0.0,<4.0.0
 spacy-fastlang==1.0.1
 db-dtypes==1.0.0
+metaflow
+wandb
 
 black==20.8b1
 pytest==7.1.2
diff --git a/jobs/search-term-data-validation-v2/search_term_data_validation_v2/data_validation.py b/jobs/search-term-data-validation-v2/search_term_data_validation_v2/data_validation.py
index aea6642..1e8b9ac 100644
--- a/jobs/search-term-data-validation-v2/search_term_data_validation_v2/data_validation.py
+++ b/jobs/search-term-data-validation-v2/search_term_data_validation_v2/data_validation.py
@@ -9,7 +9,7 @@ import re
 import json
 import string
 
-project = "mozdata"
+project = "moz-fx-data-shared-prod"
 
 
 def calculate_data_validation_metrics(metadata_source, languages_source):
diff --git a/jobs/search-term-data-validation-v2/search_term_data_validation_v2/main_flow.py b/jobs/search-term-data-validation-v2/search_term_data_validation_v2/main_flow.py
new file mode 100644
index 0000000..6c641c1
--- /dev/null
+++ b/jobs/search-term-data-validation-v2/search_term_data_validation_v2/main_flow.py
@@ -0,0 +1,74 @@
+from metaflow import Parameter, step, FlowSpec
+import wandb
+
+from data_validation import retrieve_data_validation_metrics, record_validation_results
+
+class SearchTermDataValidationFlow(FlowSpec):
+    data_validation_origin = Parameter('data_validation_origin',
+                                       help='The table from which to draw the data for validation',
+                                       required=True,
+                                       type=str)
+
+    data_validation_reporting_destination = Parameter('data_validation_reporting_destination',
+                                                      help='The table into which to put the validation results',
+                                                      required=True,
+                                                      type=str)
+
+    @step
+    def start(self):
+        '''
+        Metaflow flows must begin with a function called 'start.'
+        So here's the start function.
+        It prints out the input parameters to the job
+        and initializes an experiment tracking run.
+        '''
+        print(f"Data Validation Origin: {self.data_validation_origin}")
+        print(f"Data Validation Reporting Destination: {self.data_validation_reporting_destination}")
+
+        self.next(self.retrieve_metrics)
+
+    @step
+    def retrieve_metrics(self):
+        '''
+        Retrieves search term sanitization aggregation data from BigQuery,
+        then checks that they have not varied outside appreciable tolerances
+        in the past X days ('X' is a window set for each metric)
+        '''
+        print("Retrieving Data Validation Metrics Now...")
+
+        self.validation_df = retrieve_data_validation_metrics(self.data_validation_origin)
+        self.next(self.record_results)
+
+    @step
+    def record_results(self):
+        '''
+        Shoves the validation metrics calculated in the prior step into a BigQuery table.
+        That table has a dashboard in looker, complete with alerts
+        to notify data scientists if there are any changes that require manual inspection.
+        '''
+        print(f"Input Dataframe Shape: {self.validation_df.shape}")
+        print("Recording validation results...")
+        record_validation_results(self.validation_df, self.data_validation_reporting_destination)
+        self.next(self.end)
+
+    @step
+    def end(self):
+        '''
+         Metaflow flows end with a function called 'end.'
+         So here's the end function. It logs artifacts to wandb
+         and then prints an encouraging message.
+         We could all use one every now and then.
+         '''
+        run = wandb.init(
+            project="instep-wandb-search-term-data-validation",
+            config={
+                "example_metric": "Example Value!"
+            }
+        )
+
+        run.log({"search-term-data-validation-df": wandb.Table(dataframe=self.validation_df)})
+
+        print(f'That was easy!')
+
+if __name__ == '__main__':
+    SearchTermDataValidationFlow()
\ No newline at end of file
